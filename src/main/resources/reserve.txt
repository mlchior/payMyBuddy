@Override
    public Boolean envoyerArgent(Integer idCompteEmetteur, Integer idCompteRecepteur, float montant) {

        float montantFrais = montant * 0.005f;
        Compte compteEmetteur = compteRepository.findById(idCompteEmetteur).get();
        Compte compteRecepteur = compteRepository.findById(idCompteRecepteur).get();
        // verifier si le compte emeteur a le compte receveur dans sa liste d'amis


        if (compteEmetteur.getSolde() >= montant) {
            compteEmetteur.setSolde(compteEmetteur.getSolde() - montant);
        }else {
            System.out.println("Solde insuffisant");
        }
        //calculer la taxe de 0,5% sur le montant de la transaction

        compteRecepteur.setSolde(compteRecepteur.getSolde() + (montant - montantFrais));
        compteRepository.save(compteEmetteur);

        Transaction transaction = new Transaction();
        transaction.setSender(compteEmetteur.getUser());
        transaction.setReceiver(compteRecepteur.getUser());
        transaction.setAmount(montant);
        //transaction.setDateTime(new Date());
        transaction.setFrais(montantFrais);
        transaction.setDescription("Envoi d'argent");
        transactionRepository.save(transaction);

        return true;
    }
    package com.openclassrooms.payMyBuddy.service;

    import com.openclassrooms.payMyBuddy.model.Friend;
    import com.openclassrooms.payMyBuddy.model.User;
    import com.openclassrooms.payMyBuddy.repository.UserRepository;
    import org.junit.jupiter.api.Test;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;

    import static org.junit.jupiter.api.Assertions.*;
    @SpringBootTest
    @Transactional
    class FriendServiceImplTest {
        @Autowired
        private FriendService friendService;

        @Autowired
        private UserService userService;

        @Autowired
        private UserRepository userRepository;
        @Test
        void createFriend() {
            User user1 = new User();
            user1.setUsername("user1");
            user1.setMotDePasse("password1");
            user1.setEmail("user12@example.com");
            userService.saveUser(user1);

            User user2 = new User();
            user2.setUsername("user2");
            user2.setMotDePasse("password2");
            user2.setEmail("user2@example.com");
            userService.saveUser(user2);

            // Create a friend relationship between the two users
            friendService.createFriend(user1.getId(), user2.getId());

            // Verify that the friend relationship was created
            List<Friend> friends = friendService.getFriendsByUser(user1.getId());
            assertEquals(1, friends.size());
            Friend friend = friends.get(0);
            assertEquals(user1, friend.getUser());
            assertEquals(user2, friend.getFriend());
        }
    }